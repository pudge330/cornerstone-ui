@mixin CornerstoneUI_columns() {
	.container,
	.container-fluid {
		overflow: visible;
		position: relative;
		width: 100%;
		margin: 0 auto;
		padding-left: $cs_grid_gutter_size / 2;
		padding-right: $cs_grid_gutter_size / 2;
		&.grid-container {
			padding-top: $cs_grid_gutter_size / 2;
			padding-bottom: $cs_grid_gutter_size / 2;
		}
	}
	.container {
		max-width: $cs_grid_max_width;
	}
	.container-fluid {
		max-width: unset;
	}
	.row {
		overflow: visible;
		position: relative;
		margin-left: -($cs_grid_gutter_size / 2);
		margin-right: -($cs_grid_gutter_size / 2);
		font-size: 0;
		.grid-container & {
			margin-top: -($cs_grid_gutter_size / 2);
			margin-bottom: -($cs_grid_gutter_size / 2);
		}
	}
	.col-last {
		float: right;
	}
	.clear-fix:after {
	  content: "";
	  display: table;
	  clear: both;
	}
	[class*="col-"] {
		overflow: visible;
		display: inline-block;
		vertical-align: middle;
		width: 100%;
		position: relative;
		min-height: 1px;
		font-size: 1rem;
		padding-left: ($cs_grid_gutter_size / 2);
		padding-right: ($cs_grid_gutter_size / 2);	
		.grid-container & {
			padding-top: ($cs_grid_gutter_size / 2);
			padding-bottom: ($cs_grid_gutter_size / 2);
		}
		&.no-gutter {
			padding-left: 0;
			padding-right: 0;
		}
	}
	[class*="col-"] {
	    .container.no-gutter > .row &,
	    .container-fluid.no-gutter > .row & {
	    	padding-left: 0;
	    	padding-right: 0;
	    }
	    .row.no-gutter > &,
	    .row.no-gutter > & {
	    	padding-left: 0;
	    	padding-right: 0;
	    }
	}
	.container.no-gutter,
	.container-fluid.no-gutter {
		padding-left: 0;
	    padding-right: 0;
	    > .row {
	    	margin-left: 0;
	    	margin-right: 0;
	    }
	}
	.container,
	.container-fluid {
		&.align-top {
			[class*="col-"] {
				vertical-align: text-top;
			}
		}
		&.align-bottom {
			[class*="col-"] {
				vertical-align: text-bottom;
			}
		}
		.row {
			&.align-top {
				[class*="col-"] {
					vertical-align: text-top;
				}
			}
			&.align-middle {
				[class*="col-"] {
					vertical-align: middle;
				}
			}
			&.align-bottom {
				[class*="col-"] {
					vertical-align: text-bottom;
				}
			}	
		}
	}
	//--calculate grid
	@for $i from $cs_grid_column_size through 0 {
		$calculatedWidth: ((100% / $cs_grid_column_size) * $i);

		@if $i != 0 {
			.col-tn-#{$i} {
	            width: $calculatedWidth;
	        }
	        .offset-tn-#{$i} {
	            margin-left: $calculatedWidth;
	        }
	        .pull-tn-#{$i} {
	            right: $calculatedWidth;
	        }
	        .push-tn-#{$i} {
	            left: $calculatedWidth;
	        }
		}
		@else {
			.offset-tn-#{$i} {
	            margin-left: 0;
	        }
	        .pull-tn-#{$i} {
	            right: 0;
	        }
	        .push-tn-#{$i} {
	            left: 0;
	        }
		}
	}
	@each $bpKey, $bpSize in $cs_breakpoints {
		@if $bpKey != 'tn' {
			@include cs-breakpoint($bpKey) {
				@for $i from $cs_grid_column_size through 0 {
					$calculatedWidth: ((100% / $cs_grid_column_size) * $i);

					@if $i != 0 {
						.col-#{$bpKey}-#{$i} {
				            width: $calculatedWidth;
				        }
				        .offset-#{$bpKey}-#{$i} {
				            margin-left: $calculatedWidth;
				        }
				        .pull-#{$bpKey}-#{$i} {
				            right: $calculatedWidth;
				        }
				        .push-#{$bpKey}-#{$i} {
				            left: $calculatedWidth;
				        }
					}
					@else {
						.offset-#{$bpKey}-#{$i} {
				            margin-left: 0;
				        }
				        .pull-#{$bpKey}-#{$i} {
				            right: 0;
				        }
				        .push-#{$bpKey}-#{$i} {
				            left: 0;
				        }
					}
				}
			}
		}
	}
}